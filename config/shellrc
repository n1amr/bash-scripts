# vim: filetype=sh

################################################################################
###############################  Initialization  ###############################
# shellcheck disable=SC2148

# Determine shell type
unset SHELLNAME
if [ -n "$BASH_VERSION" ]; then
    SHELLNAME=bash
elif [ -n "$ZSH_VERSION" ]; then
    SHELLNAME=zsh
else
    echo >&2 'dotfiles: Shell type not supported by this script'
    return
fi

export LANG='en_US.UTF-8'

[ "$(tty | grep -o '/dev/tty')" = "/dev/tty" ] && IS_TTY='true' || IS_TTY='false'
grep -qE '(Microsoft|WSL)' /proc/version > /dev/null 2>&1 && IS_WSL='true' || IS_WSL='false'

export DOTFILES_ENV="${DOTFILES_ENV:-default}"
export DOTFILES_ENV_HOME="${DOTFILES_ENV_HOME:-$HOME}"
export DOTFILES_ENV_USER="${DOTFILES_ENV_USER:-$USER}"
export DOTFILES_HOME="${DOTFILES_HOME:-$DOTFILES_ENV_HOME/.dotfiles}"

generate_global_dotfiles_env () {
    local env_file="$1"
    mkdir -p "$(dirname "$env_file")"

    echo >&2 "dotfiles: Creating new dotfiles.env file at $env_file:"
    echo >&2 "# ===== Start ====="
    (
        echo '#!/bin/sh'
        echo
        echo "export DOTFILES_ENV=\"\${DOTFILES_ENV:-$DOTFILES_ENV}\""
        echo "export DOTFILES_ENV_HOME=\"\${DOTFILES_ENV_HOME:-$DOTFILES_ENV_HOME}\""
        echo "export DOTFILES_ENV_USER=\"\${DOTFILES_ENV_USER:-$DOTFILES_ENV_HOME}\""
        echo "export DOTFILES_HOME=\"\${DOTFILES_HOME:-$DOTFILES_ENV_HOME/.dotfiles}\""
        echo
        echo "export PATH=\"\$DOTFILES_HOME/custom/bin:\$DOTFILES_HOME/bin:\$PATH\""
        echo
        echo "export NDENV_ROOT=\"\$DOTFILES_ENV_HOME/.ndenv\""
        echo "export PYENV_ROOT=\"\$DOTFILES_ENV_HOME/.pyenv\""
        echo "export RBENV_ROOT=\"\$DOTFILES_ENV_HOME/.rbenv\""
        echo "export BUILD_PREFIX=\"\$DOTFILES_ENV_HOME/.local\""
    ) | tee -a "$env_file" 1>&2
    echo >&2 "# ===== End ====="
}

# Load dotfiles.env file
export DOTFILES_ENV_FILE="$DOTFILES_ENV_HOME/.dotfiles.env"
if [ ! -f "$DOTFILES_ENV_FILE" ]; then
    generate_global_dotfiles_env "$DOTFILES_ENV_FILE"
fi
source "$DOTFILES_ENV_FILE"

export PATH="$DOTFILES_HOME/bin:$PATH"

source "$DOTFILES_HOME/bin/lib/polyfills.sh"

run_custom_hook () {
    local HOOK="$1"
    local DOTFILES_CUSTOM_HOOK_FILE="$(custom-env-resolve "config/dotfiles/shellrc/hooks/$HOOK.sh")"
    if [ -f "$DOTFILES_CUSTOM_HOOK_FILE" ]; then
        source "$DOTFILES_CUSTOM_HOOK_FILE"
    else
        echo >&2 "dotfiles: Creating $DOTFILES_CUSTOM_HOOK_FILE"
        mkdir -p "$(dirname "$DOTFILES_CUSTOM_HOOK_FILE")"
        echo "#!/bin/bash" >> "$DOTFILES_CUSTOM_HOOK_FILE"
    fi
}

# Initialize shell
export HISTCONTROL='ignoreboth'
export HISTFILE="$(custom-env-resolve history/shell_history)"

if [ "$SHELLNAME" = zsh ]; then
    export ZSH="$DOTFILES_HOME/thirdparty/oh-my-zsh"
    export ZSH_CUSTOM="$DOTFILES_HOME/config/oh-my-zsh/custom"

    export ZSH_THEME="n1amr"
    export ENABLE_CORRECTION="true"
    export DISABLE_UNTRACKED_FILES_DIRTY="true"
    export ZSH_DISABLE_COMPFIX=true
    export HIST_STAMPS='' # "%Y-%m-%d %H:%M:%S"

    export plugins=(
        common-aliases
        dircycle
        dirhistory
        dirpersist
        git
        history
        pip
        rsync
        z
    )

    run_custom_hook 'pre-on-my-zsh'
    source "$ZSH/oh-my-zsh.sh"

    export HISTSIZE=1000000000
    export SAVEHIST="$HISTSIZE"
    export HISTFILESIZE="$HISTFILE"

    setopt HIST_BEEP                 # Beep when accessing nonexistent history.
    setopt BANG_HIST                 # Treat the '!' character specially during expansion.
    setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
    setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
    setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
    setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.

    source "$DOTFILES_HOME/config/completions.zsh"

elif [ "$SHELLNAME" = bash ]; then
    export HISTSIZE=-1
    export HISTFILESIZE="$HISTFILE"
    export SAVEHIST="$HISTSIZE"

    source "$DOTFILES_HOME/config/bash-init.sh"
    source "$DOTFILES_HOME/config/completions.bash"
fi

export DOTFILES_MARKS_PATH="$DOTFILES_ENV_HOME/.marks"

################################################################################
###########################  Environment variables  ############################

run_custom_hook 'pre-environment-config'

export NAME="${NAME:-Amr Alaa}"
export EMAIL="${EMAIL:-n1amr1@gmail.com}"
export DDNS="${DDNS:-n1amr.ddns.net}"
export SSH_KEY_FILE="${SSH_KEY_FILE:-$HOME/.ssh/id_rsa}"

export STORAGE="${STORAGE:-/mnt/Storage}"

export VISUAL="${VISUAL:-vim}"
export EDITOR="${EDITOR:-$VISUAL}"

export SUDO_PROMPT=${SUDO_PROMPT:-"[sudo] password for %u on %h: "}

export LANG="${LANG:-en_US.UTF-8}"

################################################################################
#################################  Functions  ##################################

# Sourced functions
source "$DOTFILES_HOME/bin/lib/can_execute"

__dotfiles_command_not_found_handler () {
    if [[ -x /usr/lib/command-not-found ]]; then
        /usr/lib/command-not-found -- "$1"
        return "$?"
    else
        echo >&2 "$1: command not found"
        return 127
    fi
}

__dotfiles_ps () {
    local args=()
    local cols='pid,cmd'
    local arg
    for arg in "$@"; do
        case "$arg" in
            -l) cols='pid,ppid,user,rss:10,size:10,vsz:10,pcpu,pmem,start,stat,cmd' ;;
            *) args+=("$arg") ;;
        esac
    done
    args+=(-o "$cols")
    command ps "${args[@]}"
}

block_caret () {
    if [[ "$(tty)" == */tty* ]]; then
        tput cnorm '\e[?8c'
        tput cvvis '\e[?8c'
    fi
}

calc () {
    local setup=''
    local query
    if [[ "$#" = '0' ]]; then
        read query
    elif [[ "$1" == '-s' ]]; then
        setup="$2"
        query="$3"
    else
        query="$1"
    fi

    [[ -n "$setup" ]] && setup="$setup; "
    python -c 'import math; '"$setup"'print('"$query"')'
}

cdd () {
    cd "$(dirname "$1")"
}

cdf () {
    diff -u "$1" "$2" | colordiff | less -FRX
}

cdtree () {
    cd "${@:-.}" || return
    tree -CL 1 --dirsfirst "$(realpath .)" | nl | less -FRX
}

deduplicate_env_paths () {
    if [ "$SHELLNAME" = zsh ]; then
        export -U PATH
    else
        export PATH="$(unique_paths "$PATH")"
    fi

    export LD_LIBRARY_PATH="$(unique_paths "$LD_LIBRARY_PATH")"
    export CPPFLAGS="$(unique_paths "$CPPFLAGS" ' ')"
    export LDFLAGS="$(unique_paths "$LDFLAGS" ' ')"
}

every () {
    local p="$1"
    shift
    while true; do
        echo
        print_title_comment "[$(date -Isec)] Every ${p}s: \$ $@"
        clear
        "$@"
        sleep "$p"
    done
}

findword () {
    grep -P "$1" /usr/share/dict/words
}

hcd () {
    history | grep -P "\d+\s+cd $*"
}

init_fzf () {
    export PATH="$DOTFILES_HOME/thirdparty/fzf/bin:$PATH"
    [[ $- == *i* ]] && source "$DOTFILES_HOME/thirdparty/fzf/shell/completion.$SHELLNAME" 2> /dev/null
    source "$DOTFILES_HOME/thirdparty/fzf/shell/key-bindings.$SHELLNAME"
}

init_powerline () {
    POWERLINE_ROOT="$(pip show powerline-status | grep -Po '(?<=Location: ).*')/powerline"

    powerline-daemon -q
    export POWERLINE_BASH_CONTINUATION=1
    export POWERLINE_BASH_SELECT=1

    if [ "$SHELLNAME" = zsh ]; then
        if [ -r "$POWERLINE_ROOT/bindings/zsh/powerline.zsh" ]; then
            source "$POWERLINE_ROOT/bindings/zsh/powerline.zsh"
        fi
    elif [ "$SHELLNAME" = bash ]; then
        if [ -r "$POWERLINE_ROOT/bindings/bash/powerline.sh" ]; then
            source "$POWERLINE_ROOT/bindings/bash/powerline.sh"
        fi
    fi
}

join () {
    local IFS="$1"
    shift
    echo "$*"
}

json () {
    if [ -t 0 ]; then # argument
         python -m json.tool "$*" | pygmentize -l json;
    else # pipe
         python -m json.tool | pygmentize -l json;
    fi;
}

jump () {
    cd -P "$DOTFILES_MARKS_PATH/$1" 2>/dev/null || {
        echo "No such mark: $1"
        return 1
    }
}

keybindings () {
    less "$DOTFILES_HOME/config/keybindings.$SHELLNAME"
}

leak () {
    tee 1>&2 | cat
}

linerange () {
    head -"$2" | tail -n +"$1"
}

[ "$SHELLNAME" = zsh ] && unalias man
man () {
    command man "$@" | pipe_to_visual
}

mark () {
    marks add "$@" && source ~/.marks.sh
}

mkcd () {
    mkdir -pv "$@" && cd "$1"
}

path () {
    if [ "$SHELLNAME" = zsh ]; then
        echo "${PATH//:/\n}"
    elif [ "$SHELLNAME" = bash ]; then
        echo "${PATH//:/$'\n'}"
    fi
}

pipe_to_editor () {
    remove_color_codes | "$EDITOR" -
}

pipe_to_visual () {
    remove_color_codes | "$VISUAL" -
}

print_horizontal_line () {
    yes -- "${@:-=}" | tr -d $'\n' | head -c "$COLUMNS"
}

print_title_comment () {
    local LENGTH=80
    local s="$@"
    if [ "${#s}" -ge "$LENGTH" ]; then
        echo "###  ${s}  ###"
    elif [ "${#s}" -eq 0 ]; then
        printf "%*s\n" "$LENGTH" "#" | tr ' ' '#'
    else
        local l_pad="$(( (LENGTH - (${#s} + 4)) / 2))"
        local r_pad="$(( LENGTH - (${#s} + 4 + l_pad) ))"
        printf "%*s" "$l_pad" "#" | tr ' ' '#'
        echo -n "  $s  "
        printf "%*s\n" "$r_pad" "#" | tr ' ' '#'
    fi
}

print_welcome () {
    [ "$COLUMNS" -gt "98" ] && echo -e \
"""\
\e[1;31m         _                               _   \e[1;34m                  _                                _  \e[m\n\
\e[1;31m  _ __  / |  __ _  _ __ ___   _ __  _   | |  \e[1;34m __      __  ___ | |  ___   ___   _ __ ___    ___ | | \e[m\n\
\e[1;31m | '_  \| | / _\` || '_ \` _  \| '__|(_) / __) \e[1;34m \ \ /\ / / / _ \| | / __| / _ \ | '_ \` _  \ / _ \| | \e[m\n\
\e[1;31m | | | || || (_| || | | | | || |    _  \__ \ \e[1;34m  \ V  V / |  __/| || (__ | (_) || | | | | ||  __/|_| \e[m\n\
\e[1;31m |_| |_||_| \__,_||_| |_| |_||_|   (_) (   / \e[1;34m   \_/\_/   \___||_| \___| \___/ |_| |_| |_| \___|(_) \e[m\n\
\e[1;31m                                        |_|  \e[1;34m                                                      \e[m\
"""
}

psgkill () {
    local force
    if [[ "$1" == '-f' ]]; then
        force='true'
        shift
    fi

    local SIG=-9
    if [[ "$1" =~ ^-[0-9]+$ ]]; then
        SIG="$1"
        shift
    fi

    local pids=($(pgrep -f "$@"))
    [ "${#pids[@]}" -gt 0 ] || return 2

    __dotfiles_ps -l -p "$(join ',' "${pids[@]}")" | sed 's/^/ # /' |
        ( [ "$force" = 'true' ] && cat || less -FRX )
    echo -e "\n $ kill $SIG ${pids[@]}"
    if [[ "$force" != 'true' ]]; then
        echo -n "Are you sure? [y/n] "
        read -r response
    fi
    if [[ "$force" == 'true' ]] || [[ "$response" = 'y' ]]; then
        kill "$SIG" "${pids[@]}"
    fi
    return 1
}

psgrep () {
    local args=()
    [[ "$1" = '-l' ]] && { args+=(-l); shift; }

    if [ "$#" -gt 0 ]; then
        local pids=($(pgrep -f "$@"))
        [ "${#pids[@]}" -gt 0 ] || return 2
        args+=(-p "$(join ',' "${pids[@]}")")
    else
        args+=(-ax)
    fi
    __dotfiles_ps "${args[@]}"
}

ranger () {
    local RANGER_DIR_FILE="$HOME/.rangerdir"
    command ranger --choosedir="$RANGER_DIR_FILE" "$@"
    cd "$(cat "$RANGER_DIR_FILE")"
}

remove_color_codes () {
    sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]|\x0D//g"
}

reset_keybindings () {
    if [ "$SHELLNAME" = zsh ]; then
        [ "$1" = 'vi' ] && bindkey -v
        source "$DOTFILES_HOME/config/keybindings.zsh"
    elif [ "$SHELLNAME" = bash ]; then
        [ "$1" = 'vi' ] && set -o vi
        source "$DOTFILES_HOME/config/keybindings.bash"
    fi
}

targz () {
    local name="$(echo "$1" | sed 's/\/\+$//')"
    if [[ "$2" = '--' ]]; then
        tar -zcvf "${name}.tar.gz" "${@:3}"
    else
        tar -zcvf "${name}.tar.gz" "$@"
    fi
}

terminal_resize () {
    eval "$(/usr/bin/resize | head -2)"
}

unique_paths () {
    local sep="${2:-:}"
    echo -n "$1$sep" | awk -v RS="$sep" -v ORS="$sep" '!a[$1]++' | sed "s/$sep\+/$sep/g; s/^$sep\|$sep$//g"
}

unmark () {
    marks remove "$@" && source ~/.marks.sh
}

up () {
    # shellcheck disable=SC2051
    cd "$(printf '../%.0s' {1.."$1"})" || return
}

vdiff () {
    diff -u "$@" | pipe_to_visual
}

################################################################################
####################################  PATH  ####################################

export BUILD_PREFIX="${BUILD_PREFIX:-$DOTFILES_ENV_HOME/.local}"
export CPPFLAGS="-I$BUILD_PREFIX/include $CPPFLAGS"
export LDFLAGS="-L$BUILD_PREFIX/lib $LDFLAGS"
export LD_LIBRARY_PATH="$BUILD_PREFIX/lib:$LD_LIBRARY_PATH"
export PATH="$BUILD_PREFIX/bin:$PATH"

[[ "${DOTFILES_CONFIG_ENABLE_NDENV:-true}" == 'true' ]] && {
    export PATH="$NDENV_ROOT/bin:$PATH"
    can_execute ndenv && eval "$(ndenv init -)"
}

[[ "${DOTFILES_CONFIG_ENABLE_PYENV:-true}" == 'true' ]] && {
    export PATH="$PYENV_ROOT/bin:$PATH"
    can_execute pyenv && eval "$(pyenv init -)"
}

[[ "${DOTFILES_CONFIG_ENABLE_RBENV:-true}" == 'true' ]] && {
    export PATH="$RBENV_ROOT/bin:$PATH"
    export PATH="$RBENV_ROOT/plugins/ruby-build/bin:$PATH"
    can_execute rbenv && eval "$(rbenv init -)"
}

export PATH="$DOTFILES_HOME/bin:$PATH"
export PATH="$DOTFILES_HOME/config/i3/bin:$PATH"
export PATH="$DOTFILES_HOME/custom/bin:$PATH"

################################################################################
##################################  Aliases  ###################################

alias -- '-'='cd -'
alias alert='DISPLAY=:0 paplay "$DOTFILES_HOME/resources/sounds/alert.ogg"'
alias apt='sudo apt'
alias bakgz='bak --gzip'
alias bakmv='bak --move'
alias beep='DISPLAY=:0 paplay "$DOTFILES_HOME/resources/sounds/bell.ogg"'
alias c='clipboard'
alias chgrp='chgrp --preserve-root'
alias chmod='chmod --preserve-root'
alias chown='chown --preserve-root'
alias clock='tty-clock -scn -C 2'
alias colorgrep='grep --color=always'
alias cp='cp -i'
alias diff='diff -u'
alias display-restore='export DISPLAY=:0 && tmux setenv DISPLAY "$DISPLAY"'
alias dl='trash'
alias dotrc='dotfiles config'
alias dt='date +"%Y-%m-%d %H:%M:%S %Z %:::z %a %r"'
alias dud='du -d 1 -h'
alias emacs='DISPLAY= emacs'
alias f='find'
alias fgrep='grep -F'
alias g='grep'
alias ga='git add'
alias gapa='git add --patch'
alias gc='git commit -v'
alias gcl='git clone --recursive'
alias gd='git diff'
alias gdca='git diff --cached'
alias gdplshared='drive pull -ignore-name-clashes --ignore-conflict'
alias gist='gistey -sf'
alias glp='git lp'
alias gp='grep -P --color=auto'
alias gpull='git pull origin $(git_current_branch)'
alias gpush='git push origin $(git_current_branch)'
alias grep='grep --color=auto'
alias gst='git status'
alias gsup='git branch --set-upstream-to=origin/$(git_current_branch)'
alias h='history'
alias hbackup='yes | cp ~/.${SHELLNAME}_history ~/.${SHELLNAME}_history.bak;'
alias hgp="fc -El 0 | grep"
alias hrestore='yes | cp ~/.${SHELLNAME}_history.bak ~/.${SHELLNAME}_history; for i in {0..10000}; do echo; done; /usr/bin/clear; cd ~; exec ${SHELLNAME}'
alias i3config='"$EDITOR" "$DOTFILES_HOME/config/i3/config"'
alias ipy="ipython"
alias ipython="python -c 'import IPython; IPython.terminal.ipapp.launch_new_instance()'"
alias iso-date='date -Iseconds'
alias j='jump'
alias k='cdtree'
alias l='ls -lgohN --time-style=posix-long-iso'
alias la='ls -lgohN --time-style=posix-long-iso -A'
alias ll='ls -lN --time-style="+%Y-%m-%d %H:%M:%S"'
alias ls='ls --color=yes'
alias matlab-cli='DISPLAY= matlab'
alias md='mkdir -pv'
alias mkdir='mkdir -pv'
alias mv='mv -i'
alias myip='dig +short myip.opendns.com @resolver1.opendns.com'
alias myips='ip addr | grep -Po '\''inet6? (addr:)?\s?((([0-9]+\.){3}[0-9]+)|[a-fA-F0-9:]+)'\'' | awk '\''{ sub(/inet6? (addr:)? ?/, ""); print }'\'''
alias nmcli='nmcli -a'
alias o='gui-open'
alias ord='cd "$(cat /tmp/ranger-dir)"'
alias p='ipython'
alias pdfjoin='pdfjoin --paper a4paper --rotateoversize false'
alias ps='__dotfiles_ps'
alias psg='psgrep'
alias psgl='psgrep -l'
alias psl='__dotfiles_ps -l'
alias py='python -c'
alias r='ranger'
alias rb='ruby -e'
alias rd='rmdir'
alias ring='DISPLAY=:0 paplay "$DOTFILES_HOME/resources/sounds/ring.ogg"'
alias rm='rm -i --preserve-root'
alias rsync-copy='rsync -avz --progress -h'
alias rsync-move='rsync -avz --progress -h --remove-source-files'
alias rsync-synchronize='rsync -avzu --delete --progress -h'
alias rsync-update='rsync -avzu --progress -h'
alias s='subl -a'
alias shellrc='"$EDITOR" "$DOTFILES_HOME/config/shellrc"'
alias sync='sudo "$(which syncf)"'
alias t-display-restore='tmux setenv -g DISPLAY :0'
alias t='tmux'
alias tf='tail -F'
alias tmain='tmux-session main'
alias tsn='tmux-session'
alias tssh='tmux-session ssh'
alias u='up'
alias v='"$VISUAL"'
alias vi='"$VISUAL"'
alias vibindkey='reset_keybindings vi'
alias vimrc='"$EDITOR" "$DOTFILES_HOME/config/vim/vimrc"'
alias vs='vim-server'
alias wget='wget -c'
alias x='extract'
alias xdu='ncdu -x'
alias zshrc='"$EDITOR" "$DOTFILES_HOME/config/shellrc"'

if [ "$SHELLNAME" = zsh ]; then
    alias -g 'A=2>&1'
    alias -g 'C=| clipboard'
    alias -g 'G=| grep -P'
    alias -g 'S=| subl'
    alias -g "E=| pipe_to_editor"
    alias -g "V=| pipe_to_visual"
    alias -g "TV=| leak | pipe_to_visual"
    alias -g "VS=| remove_color_codes | vim-server"
    alias -g "HLP= --help 2>&1 | pipe_to_visual"
    alias -g "P=| pipe"
fi

if [[ ! -f ~/.marks.sh ]] ||
        [[ ! -f ~/.ranger-marks.conf ]] ||
        [[ ! -d "$DOTFILES_MARKS_PATH" ]]; then
    "$DOTFILES_HOME/bin/update-marks" > /dev/null
fi
source ~/.marks.sh

################################################################################
#################################  PS1 create  #################################

# shellcheck disable=SC2025,SC2026,SC2154
reset_ps1 () {
    if [ "$SHELLNAME" = zsh ]; then
        PS1=\
$'%{\e[0m%}'\
$'`__ps1_zsh_prompt_command`'\
$'%{\e[1;31m%}%n@%m'\
$'%{\e[0m%}:'\
$'%{\e[1;34m%}%~'\
$'%{\e[0;36m%}`__ps1_pyenv_version`'\
$'%{\e[1;35m%}`__ps1_git_branch`'\
$'%{\e[1;30m%}`__ps1_warnings`'\
$'%{\e[2;32m%}`__ps1_command_eval`'\
$'%{\e[0m%}\n '\
$'%{\e[0;32m%}`[ "$USER" = "root" ] || echo "$"`'\
$'%{\e[0;31m%}`[ "$USER" = "root" ] && echo "#"`'\
$'%{\e[0m%} '

        PS2='%{$fg[red]%} > %{$reset_color%}'
    elif [ "$SHELLNAME" = bash ]; then
        PS1=\
'\[\e[m\]'\
'${debian_chroot:+($debian_chroot) }'\
'\[\e[1;31m\]\u@\h'\
'\[\e[m\]:'\
'\[\e[1;34m\]\w'\
'\[\e[0;36m\]$(__ps1_pyenv_version)'\
'\[\e[1;35m\]$(__ps1_git_branch)'\
'\[\e[1;30m\]$(__ps1_warnings)'\
'\[\e[2;32m\]$(__ps1_command_eval)'\
'\[\e[m\]\n '\
'\[\e[0;32m\]`[ "$USER" = "root" ] || echo "$"`'\
'\[\e[0;31m\]`[ "$USER" = "root" ] && echo "#"`'\
'\[\e[m\] '

        PS2='\[\e[0;31m\] > \[\e[m\]'
    fi

    ps1_command_reset
}

__ps1_git_branch () {
    git branch 2>/dev/null | grep '\*' | sed 's/* \(.*\)/ (\1)/'
}

__ps1_pyenv_version () {
    echo "${PYENV_VERSION:+ (${PYENV_VERSION})}" 2>/dev/null
}

__ps1_warnings () {
    local msgs=()
    [ "$DISPLAY" != ':0' ] && msgs+=("DISPLAY=$DISPLAY")
    [ "$USER" = 'root' ] && msgs+=("ROOT")
    [ "$SHELLNAME" != 'zsh' ] && msgs+=("SHELL=$SHELLNAME")
    local msg="${msgs[@]}"
    msg="${msg// / | }"
    [ -n "$msg" ] && echo " ($msg)"
}

__ps1_zsh_prompt_command () {
    [ -n "$ZSH_PROMPT_COMMAND" ] && { eval "$ZSH_PROMPT_COMMAND"; } > /dev/null 2>&1 &
}

# PS1 extention
__ps1_command_eval () {
    can_execute ps1_command && echo -e " [ $(ps1_command) ]"
}

ps1_command_reset () {
    can_execute ps1_command && unset -f ps1_command
}

ps1_time () {
    ps1_command () { date -Isec; }
}

ps1_words () {
    ps1_command () { shuf '/mnt/Storage/Documents/Reader/Languages/English/English Words/all-words.txt' | head -1; }
}

ps1_all_words () {
    ps1_command () { shuf /usr/share/dict/words | head -1; }
}

ps1_memory () {
    ps1_command () { free -m | head -2 | tail -1 | awk '{printf "%d/%d\n", $3, $2}'; }
}

################################################################################
################################  Finalization  ################################

# Options
if [ "$SHELLNAME" = zsh ]; then
    unsetopt EXTENDED_HISTORY
    setopt -o sharehistory
    command_not_found_handler () { __dotfiles_command_not_found_handler "$@"; }
elif [ "$SHELLNAME" = bash ]; then
    shopt -s autocd
    shopt -s globstar
    # Save and reload the history after each command finishes
    if [ "$SHELLNAME" = bash ] && [ "$IS_WSL" != 'true' ]; then
        export PROMPT_COMMAND="history -a && history -c && history -r; $PROMPT_COMMAND"
    fi
    command_not_found_handle () { __dotfiles_command_not_found_handler "$@"; }
fi


# only in interactive shell
if [[ $- == *i* ]]; then
    stty stop undef # to unmap ctrl-s
fi

eval "$(dircolors "$DOTFILES_HOME/config/dircolors")"

[[ "${DOTFILES_CONFIG_LOAD_SSH_AGENT:-true}" == 'true' ]] && {
    source load_ssh_agent
}

if [ "$SHELLNAME" = zsh ]; then
    source "$DOTFILES_HOME/thirdparty/git-flow-completion/git-flow-completion.zsh"
elif [ "$SHELLNAME" = bash ]; then
    source "$DOTFILES_HOME/thirdparty/git-flow-completion/git-flow-completion.bash"
fi

# terminal_resize
reset_ps1
reset_keybindings vi
block_caret

run_custom_hook 'post-shellrc'
deduplicate_env_paths
