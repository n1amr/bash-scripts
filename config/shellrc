################################################################################
###############################  Initialization  ###############################
# shellcheck disable=SC2148

# Determine shell type
unset SHELLNAME
if [ -n "$BASH_VERSION" ]; then
    SHELLNAME=bash
elif [ -n "$ZSH_VERSION" ]; then
    SHELLNAME=zsh
else
    echo 'Shell type not supported by this script'
    return
fi

DOTFILES_HOME="$HOME/.dotfiles"

# Load config file
DOTFILES_CONFIG_FILE=~/.dotfiles_config
if [ -f "$DOTFILES_CONFIG_FILE" ]; then
    source "$DOTFILES_CONFIG_FILE"
else
    echo "Note: Creating new config file."
    (
        echo '#!/bin/bash'
        echo
        echo "export DOTFILES_HOME='$DOTFILES_HOME'"
        echo "export NDENV_ROOT='$HOME/.ndenv'"
        echo "export PYENV_ROOT='$HOME/.pyenv'"
        echo "export RBENV_ROOT='$HOME/.rbenv'"
    ) >> "$DOTFILES_CONFIG_FILE"
fi

# Initialize shell
export HISTFILE=~/.shell_history
export HISTSIZE=10000000
export SAVEHIST=$HISTSIZE
export HISTCONTROL='ignoreboth'

if [ "$SHELLNAME" = zsh ]; then
    export ZSH="$DOTFILES_HOME/thirdparty/oh-my-zsh"

    export ZSH_THEME="n1amr"
    export ENABLE_CORRECTION="true"
    export DISABLE_UNTRACKED_FILES_DIRTY="true"

    export plugins=(
        command-not-found
        common-aliases
        dircycle
        dirhistory
        dirpersist
        extract
        git
        history
        jump
        pip
        rsync
        z
    )
    source "$ZSH/oh-my-zsh.sh"
elif [ "$SHELLNAME" = bash ]; then
    source "$DOTFILES_HOME/config/bash-init.sh"
fi

run_custom_hook() {
    HOOK="$1"
    DOTFILES_CUSTOM_HOOK_FILE="$DOTFILES_HOME/custom/config/dotfiles/shellrc/hooks/$HOOK.sh"
    if [ -f "$DOTFILES_CUSTOM_HOOK_FILE" ]; then
        source "$DOTFILES_CUSTOM_HOOK_FILE"
    fi
}

################################################################################
###########################  Environment variables  ############################

run_custom_hook 'pre-environment-config'

export NAME="${NAME:-Amr Alaa}"
export EMAIL="${EMAIL:-n1amr1@gmail.com}"
export DDNS="${DDNS:-n1amr.ddns.net}"
export SSH_KEY_FILE="${SSH_KEY_FILE:-$HOME/.ssh/id_rsa}"

export STORAGE="${STORAGE:-/mnt/Storage}"

export VISUAL="${VISUAL:-vim}"
export EDITOR="${EDITOR:-$VISUAL}"

export SUDO_PROMPT=${SUDO_PROMPT:-"[sudo] password for %u on %h: "}

if [ "$(tty | grep -o '/dev/tty')" = "/dev/tty" ]; then
  export IS_TTY=1
else
  export IS_TTY=0
fi

################################################################################
####################################  PATH  ####################################

export PATH="$NDENV_ROOT/bin:$PATH"
export PATH="$PYENV_ROOT/bin:$PATH"
export PATH="$RBENV_ROOT/bin:$PATH"
export PATH="$RBENV_ROOT/plugins/ruby-build/bin:$PATH"
eval "$( type ndenv > /dev/null 2>&1 && ndenv init -)"
eval "$( type pyenv > /dev/null 2>&1 && pyenv init -)"
eval "$( type rbenv > /dev/null 2>&1 && rbenv init -)"
export PATH="$DOTFILES_HOME/bin:$PATH"
export PATH="$DOTFILES_HOME/custom/bin:$PATH"

# Remove duplicates
if [ "$SHELLNAME" = zsh ]; then
    export -U PATH
elif [ "$SHELLNAME" = bash ]; then
    PATH="$(echo -n "${PATH}:" | awk -v RS=':' -v ORS=":" '!a[$1]++')"
    export PATH="${PATH%?}"
fi

################################################################################
#################################  Functions  ##################################

block_caret () {
    if [[ "$(tty)" == */tty* ]]; then
        tput cnorm '\e[?8c'
        tput cvvis '\e[?8c'
    fi
}

calc () {
    if [[ "$1" == '-s' ]]; then
        setup="$2"
        query="$3"
        python -c 'import math; '"$setup"'; print('"$query"')'
    else
        query="$1"
        python -c 'import math; print('"$query"')'
    fi
}

cdf () {
    diff -u "$1" "$2" | colordiff | less -FRX
}

cdtree () {
    cd "${@:-.}" || return
    tree -CL 1 --dirsfirst "$(realpath .)" | nl | less -FRX
}

findword () {
    grep -P "$1" /usr/share/dict/words
}

hcd () {
    history | grep -P "\d+\s+cd $*"
}

init_fzf () {
    if [ "$SHELLNAME" = zsh ]; then
        [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
    elif [ "$SHELLNAME" = bash ]; then
        [ -f ~/.fzf.bash ] && source ~/.fzf.bash
    fi
}

init_powerline () {
    POWERLINE_ROOT="$(pip show powerline-status | grep -Po '(?<=Location: ).*')/powerline"

    powerline-daemon -q
    export POWERLINE_BASH_CONTINUATION=1
    export POWERLINE_BASH_SELECT=1

    if [ "$SHELLNAME" = zsh ]; then
        if [ -r "$POWERLINE_ROOT/bindings/zsh/powerline.zsh" ]; then
            source "$POWERLINE_ROOT/bindings/zsh/powerline.zsh"
        fi
    elif [ "$SHELLNAME" = bash ]; then
        if [ -r "$POWERLINE_ROOT/bindings/bash/powerline.sh" ]; then
            source "$POWERLINE_ROOT/bindings/bash/powerline.sh"
        fi
    fi
}

json () {
    if [ -t 0 ]; then # argument
         python -m json.tool "$*" | pygmentize -l json;
    else # pipe
         python -m json.tool | pygmentize -l json;
    fi;
}

keybindings () {
    less "$DOTFILES_HOME/config/keybindings.$SHELLNAME"
}

linerange () {
    head -"$2" | tail -n +"$1"
}

man() {
    command man "$@" | pipe_to_visual
}

pipe_to_editor() {
    remove_color_codes | "$EDITOR" -
}

pipe_to_visual() {
    remove_color_codes | "$VISUAL" -
}

print_pdf_counts () {
    DELIM=';.;.;'
    # shellcheck disable=SC2016,SC2048,SC2086
    [ $# -ne 0 ] && exiftool -n -q -p '${PageCount}'"$DELIM"'${PageCount;our $sum; $_=($sum+=$_)}'"$DELIM"'${FileName}' $* 2> /dev/null \
    | awk -F "$DELIM" '{sum=$2;$2=":"; print $0} END{print "===============\nTotal: ", sum}'
}

print_title_comment () {
    LENGTH=80
    if [ ${#1} -ge $LENGTH ]; then
        echo "### ${1} ###"
    elif [ ${#1} -eq 0 ]; then
        printf "%*s\n" $LENGTH "#" | tr ' ' '#'
    else
        printf "%*s%*s\n" $(( (${#1} + 4 + LENGTH) / 2)) "__${1// /$}__" $(( LENGTH - (${#1} + 4 + LENGTH) / 2)) "#" | tr ' _$' '#  '
    fi
}

print_welcome () {
    [ "$COLUMNS" -gt "98" ] && echo -e \
"""\
\e[1;31m         _                               _   \e[1;34m                  _                                _  \e[m\n\
\e[1;31m  _ __  / |  __ _  _ __ ___   _ __  _   | |  \e[1;34m __      __  ___ | |  ___   ___   _ __ ___    ___ | | \e[m\n\
\e[1;31m | '_  \| | / _\` || '_ \` _  \| '__|(_) / __) \e[1;34m \ \ /\ / / / _ \| | / __| / _ \ | '_ \` _  \ / _ \| | \e[m\n\
\e[1;31m | | | || || (_| || | | | | || |    _  \__ \ \e[1;34m  \ V  V / |  __/| || (__ | (_) || | | | | ||  __/|_| \e[m\n\
\e[1;31m |_| |_||_| \__,_||_| |_| |_||_|   (_) (   / \e[1;34m   \_/\_/   \___||_| \___| \___/ |_| |_| |_| \___|(_) \e[m\n\
\e[1;31m                                        |_|  \e[1;34m                                                      \e[m\
"""
}

print_videos_duration () {
    DELIM=';.;.;'
    # shellcheck disable=SC2016,SC2048,SC2086
    [ $# -ne 0 ] && exiftool -n -q -p '${Duration; $_=ConvertDuration($_)}'"$DELIM"'${Duration;our $sum;$_=ConvertDuration($sum+=$_)}'"$DELIM"'${FileName}' $* 2> /dev/null \
    | awk -F "$DELIM" '{sum=$2;$2=""; print $0} END{print "===============\nTotal: ", sum}'
}

psgkill () {
    serach_result="$(psgrep "$@")"
    echo "$serach_result" | less -SFRX
    echo -ne "\nAre you sure? [y/n] "
    read -r response
    if [[ "$response" = 'y' ]]; then
        PIDS=($(echo "$serach_result" | remove_color_codes | tail +2 | awk '{print $2}' | tr '\n' ' '))
        kill -9 "${PIDS[@]}"
    fi
}

psgrep () {
    # shellcheck disable=SC2009
    ps aux | grep -v grep | grep -i --color=always -e VSZ -e "$@"
}

# shellcheck disable=SC2164
ranger () {
    command ranger --choosedir="$HOME/.rangerdir" "$@"
    cd "$(cat "$HOME/.rangerdir")"
}

remove_color_codes () {
    sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]|\x0D//g"
}

reset_keybindings () {
    if [ "$SHELLNAME" = zsh ]; then
        [ "$1" = 'vi' ] && bindkey -v
        source "$DOTFILES_HOME/config/keybindings.zsh"
    elif [ "$SHELLNAME" = bash ]; then
        [ "$1" = 'vi' ] && set -o vi
        source "$DOTFILES_HOME/config/keybindings.bash"
    fi
}

sum_videos_duration () {
    # shellcheck disable=SC2068
    print_videos_duration $@ | tail -1 | awk '{print $2}'
}

terminal_resize () {
    eval "$(/usr/bin/resize | head -2)"
}

tmuxsession () {
    session="$1"
    if ! tmux has-session -t "$session"; then
        tmux new-session -d -s "$session"
    fi
    if [[ -z "$TMUX" ]]; then
        tmux attach -t "$session"
    else
        tmux switch-client -t "$session"
    fi
}

up () {
    # shellcheck disable=SC2051
    cd "$(printf '../%.0s' {1.."$1"})" || return
}

vdiff () {
    diff -u "$@" | pipe_to_visual
}

################################################################################
##################################  Aliases  ###################################

alias apt='sudo apt'
alias bakmv='bak --move'
alias bell='DISPLAY=:0 paplay "$DOTFILES_HOME/resources/sounds/bell.ogg"'
alias clock='tty-clock -scn -C 2'
alias cp='cp -i'
alias display-restore='export DISPLAY=:0 && tmux setenv DISPLAY :0'
alias dl='trash'
alias emacs='DISPLAY= emacs'
alias fgrep='grep -F'
alias g='grep'
alias ga='git add'
alias gc='git commit -v'
alias gcl='git clone --recursive'
alias gd='git diff'
alias gdca='git diff --cached'
alias gdplshared='drive pull -ignore-name-clashes --ignore-conflict'
alias gist='gistey -sf'
alias gp='grep -P --color=auto'
alias gst='git status'
alias h='history'
alias hbackup='yes | cp ~/.${SHELLNAME}_history ~/.${SHELLNAME}_history.bak;'
alias hgp="fc -El 0 | grep"
alias hrestore='yes | cp ~/.${SHELLNAME}_history.bak ~/.${SHELLNAME}_history; for i in {0..10000}; do echo; done; /usr/bin/clear; cd ~; exec ${SHELLNAME}'
alias i3config='"$EDITOR" "$DOTFILES_HOME/config/i3/config"'
alias ipy="ipython"
alias ipython="python -c 'import IPython; IPython.terminal.ipapp.launch_new_instance()'"
alias j='jump'
alias k='cdtree'
alias l='ls -lgoh'
alias la='ls -lAFh'
alias ll='ls -l'
alias ls='ls --color=yes'
alias matlab-cli='DISPLAY= matlab'
alias md='mkdir -pv'
alias mkdir='mkdir -pv'
alias mv='mv -i'
alias myip='dig +short myip.opendns.com @resolver1.opendns.com'
alias myips='ip addr | grep -Po '\''inet6? (addr:)?\s?((([0-9]+\.){3}[0-9]+)|[a-fA-F0-9:]+)'\'' | awk '\''{ sub(/inet6? (addr:)? ?/, ""); print }'\'''
alias nmcli='nmcli -a'
alias o='gui-open'
alias p='ipython'
alias psg='psgrep'
alias pss='ps -e lx'
alias py='python -c'
alias r='ranger'
alias rb='ruby -e'
alias ring='DISPLAY=:0 paplay "$DOTFILES_HOME/resources/sounds/ring.ogg"'
alias rm='rm -i'
alias s='subl -a'
alias shellrc='"$EDITOR" "$DOTFILES_HOME/config/shellrc"'
alias sync='sudo "$(which syncf)"'
alias t-display-restore='tmux setenv -g DISPLAY :0'
alias t='tmux'
alias tf='tail -f'
alias tmain='tmuxsession main'
alias tsn='tmuxsession'
alias tssh='tmuxsession ssh'
alias u='up'
alias v='"$VISUAL"'
alias vi='"$VISUAL"'
alias vibindkey='reset_keybindings vi'
alias vimrc='"$EDITOR" "$DOTFILES_HOME/config/vim/vimrc"'
alias vs='vim-server'
alias wget='wget -c'

if [ "$SHELLNAME" = zsh ]; then
    alias -g 'A=2>&1'
    alias -g 'CP=| xsel -ib'
    alias -g 'G=| grep -P'
    alias -g 'S=| subl'
    alias -g "E=| pipe_to_editor"
    alias -g "V=| pipe_to_visual"
    alias -g "VS=| remove_color_codes | vim-server"
    alias -g "HLP= --help 2>&1 | pipe_to_visual"
fi

################################################################################
#################################  PS1 create  #################################

# shellcheck disable=SC2025,SC2026,SC2154
reset_ps1() {
    if [ "$SHELLNAME" = zsh ]; then
        PS1=\
$'%{\e[0m%}'\
$'%{\e[1;31m%}%n@%m'\
$'%{\e[0m%}:'\
$'%{\e[1;34m%}%~'\
$'%{\e[0;36m%}`__ps1_pyenv_version`'\
$'%{\e[1;35m%}`__ps1_git_branch`'\
$'%{\e[1;30m%}`__ps1_warnings`'\
$'%{\e[2;32m%}`__ps1_command_eval`'\
$'%{\e[0m%}\n '\
$'%{\e[0;32m%}`[ "$USER" = "root" ] || echo "$"`'\
$'%{\e[0;31m%}`[ "$USER" = "root" ] && echo "#"`'\
$'%{\e[0m%} '

        PS2='%{$fg[red]%} > %{$reset_color%}'
    elif [ "$SHELLNAME" = bash ]; then
        PS1=\
'\[\e[m\]'\
'${debian_chroot:+($debian_chroot) }'\
'\[\e[1;31m\]\u@\h'\
'\[\e[m\]:'\
'\[\e[1;34m\]\w'\
'\[\e[0;36m\]$(__ps1_pyenv_version)'\
'\[\e[1;35m\]$(__ps1_git_branch)'\
'\[\e[1;30m\]$(__ps1_warnings)'\
'\[\e[2;32m\]$(__ps1_command_eval)'\
'\[\e[m\]\n '\
'\[\e[0;32m\]`[ "$USER" = "root" ] || echo "$"`'\
'\[\e[0;31m\]`[ "$USER" = "root" ] && echo "#"`'\
'\[\e[m\] '

        PS2='\[\e[0;31m\] > \[\e[m\]'
    fi

    ps1_command_reset
}

__ps1_git_branch () {
    git branch 2>/dev/null | grep '\*' | sed 's/* \(.*\)/ (\1)/'
}

__ps1_pyenv_version () {
    echo "${PYENV_VERSION:+ (${PYENV_VERSION})}" 2>/dev/null
}

__ps1_warnings () {
    msgs=()
    [ "$DISPLAY" != ':0' ] && msgs+=("DISPLAY=$DISPLAY")
    [ "$USER" = 'root' ] && msgs+=("ROOT")
    [ "$SHELLNAME" != 'zsh' ] && msgs+=("SHELL=$SHELLNAME")
    msg="${msgs// / | }"
    [ -n "$msg" ] && echo " ($msg)"
}

# PS1 extention
__ps1_command_eval() {
    type ps1_command > /dev/null 2>&1 && echo -e " {{ $(ps1_command) }}"
}

ps1_command_reset() {
    type ps1_command > /dev/null 2>&1 && unset -f ps1_command
}

ps1_time() {
    ps1_command() { date +%T; }
}

ps1_words() {
    ps1_command() { shuf '/mnt/Storage/Documents/Reader/Languages/English/English Words/all-words.txt' | head -1; }
}

ps1_all_words() {
    ps1_command() { shuf /usr/share/dict/words | head -1; }
}

ps1_memory() {
    ps1_command() { free -m | head -2 | tail -1 | awk '{printf "%d/%d\n", $3, $2}'; }
}

################################################################################
################################  Finalization  ################################

# Options
if [ "$SHELLNAME" = zsh ]; then
    unsetopt EXTENDED_HISTORY
elif [ "$SHELLNAME" = bash ]; then
    shopt -s autocd
    shopt -s globstar
fi

# only in interactive shell
if [[ $- == *i* ]]; then
    stty stop undef # to unmap ctrl-s
fi

eval "$(dircolors "$DOTFILES_HOME/config/dircolors")"

source load_ssh_agent

if [ "$SHELLNAME" = zsh ]; then
    source "$DOTFILES_HOME/thirdparty/git-flow-completion/git-flow-completion.zsh"
elif [ "$SHELLNAME" = bash ]; then
    source "$DOTFILES_HOME/thirdparty/git-flow-completion/git-flow-completion.bash"
fi

# terminal_resize
reset_ps1
reset_keybindings vi
block_caret

run_custom_hook 'post-shellrc'
