unset SHELLNAME
set SHELLNAME=tcsh

setenv DOTFILES_HOME "${HOME}/.dotfiles"

setenv TERM xterm-256color

set DQ='"'
set DS='$'

if ( ! $?LD_LIBRARY_PATH ) then
    setenv LD_LIBRARY_PATH  ""
else
    setenv LD_LIBRARY_PATH  ":${LD_LIBRARY_PATH}"
endif

setenv BUILD_PREFIX     "${HOME}/.local"
setenv CPPFLAGS         "-I${BUILD_PREFIX}/include"
setenv LDFLAGS          "-L${BUILD_PREFIX}/lib"
setenv LD_LIBRARY_PATH  "${BUILD_PREFIX}/lib${LD_LIBRARY_PATH}"
setenv PATH             "${BUILD_PREFIX}/bin:${PATH}"

# Deduplicate paths
setenv LDFLAGS          "`echo -n ${LDFLAGS}:  | tr ' ' ':' | awk -v RS=':' -v ORS=':' '\\!a[${DS}1]++' | sed 's/:\+/:/g; s/^:\|:${DS}//g' | tr ':' ' '`"
setenv CPPFLAGS         "`echo -n ${CPPFLAGS}: | tr ' ' ':' | awk -v RS=':' -v ORS=':' '\\!a[${DS}1]++' | sed 's/:\+/:/g; s/^:\|:${DS}//g' | tr ':' ' '`"
setenv LD_LIBRARY_PATH  "`echo -n ${LD_LIBRARY_PATH}:       | awk -v RS=':' -v ORS=':' '\\!a[${DS}1]++' | sed 's/:\+/:/g; s/^:\|:${DS}//g'`"
setenv PATH             "`echo -n ${PATH}:                  | awk -v RS=':' -v ORS=':' '\\!a[${DS}1]++' | sed 's/:\+/:/g; s/^:\|:${DS}//g'`"

setenv BASH_BIN  "`which bash`" && alias b "setenv SHELL ${DQ}${BASH_BIN}${DQ} && exec ${DQ}${DS}SHELL${DQ}"
setenv ZSH_BIN   "`which zsh`"  && alias z "setenv SHELL ${DQ}${ZSH_BIN}${DQ} && exec ${DQ}${DS}SHELL${DQ}"

setenv VISUAL vim
setenv EDITOR vim

alias apt 'sudo apt'
alias bakmv 'bak --move'
alias bell 'DISPLAY=:0 paplay "$DOTFILES_HOME/resources/sounds/bell.ogg"'
alias clock 'tty-clock -scn -C 2'
alias cp 'cp -i'
alias display-restore 'export DISPLAY=:0 && tmux setenv DISPLAY :0'
alias dl 'trash'
alias dt 'date +"%Y-%m-%d %H:%M:%S %Z %:::z %a %r"'
alias dud 'du -d 1 -h'
alias emacs 'DISPLAY= emacs'
alias fgrep 'grep -F'
alias g 'grep'
alias ga 'git add'
alias gapa 'git add --patch'
alias gc 'git commit -v'
alias gcl 'git clone --recursive'
alias gd 'git diff'
alias gdca 'git diff --cached'
alias gdplshared 'drive pull -ignore-name-clashes --ignore-conflict'
alias gist 'gistey -sf'
alias gp 'grep -P --color=auto'
alias grep 'grep --color'
alias gst 'git status'
alias h 'history'
alias hbackup 'yes | cp ~/.${SHELLNAME}_history ~/.${SHELLNAME}_history.bak;'
alias hgp "fc -El 0 | grep"
alias hrestore 'yes | cp ~/.${SHELLNAME}_history.bak ~/.${SHELLNAME}_history; for i in {0..10000}; do echo; done; /usr/bin/clear; cd ~; exec ${SHELLNAME}'
alias i3config '"$EDITOR" "$DOTFILES_HOME/config/i3/config"'
alias ipy "ipython"
alias ipython "python -c 'import IPython; IPython.terminal.ipapp.launch_new_instance()'"
alias iso-date 'date -Iseconds'
alias j 'jump'
alias k 'cdtree'
alias l 'ls -lgohN --time-style=posix-long-iso'
alias la 'ls -lgohN --time-style=posix-long-iso -A'
alias ll 'ls -lN --time-style="+%Y-%m-%d %H:%M:%S"'
alias ls 'ls --color=yes'
alias matlab-cli 'DISPLAY= matlab'
alias md 'mkdir -pv'
alias mkdir 'mkdir -pv'
alias mv 'mv -i'
alias myip 'dig +short myip.opendns.com @resolver1.opendns.com'
alias myips 'ip addr | grep -Po '\''inet6? (addr:)?\s?((([0-9]+\.){3}[0-9]+)|[a-fA-F0-9:]+)'\'' | awk '\''{ sub(/inet6? (addr:)? ?/, ""); print }'\'''
alias nmcli 'nmcli -a'
alias o 'gui-open'
alias p 'ipython'
alias psg 'psgrep'
alias pss 'ps -e lx'
alias py 'python -c'
alias r 'ranger'
alias rb 'ruby -e'
alias rd 'rmdir'
alias ring 'DISPLAY=:0 paplay "$DOTFILES_HOME/resources/sounds/ring.ogg"'
alias rm 'rm -i'
alias rsync-copy 'rsync -avz --progress -h'
alias rsync-move 'rsync -avz --progress -h --remove-source-files'
alias rsync-synchronize 'rsync -avzu --delete --progress -h'
alias rsync-update 'rsync -avzu --progress -h'
alias shellrc '"$EDITOR" "$DOTFILES_HOME/config/shellrc"'
alias sync 'sudo "$(which syncf)"'
alias t-display-restore 'tmux setenv -g DISPLAY :0'
alias t 'tmux'
alias tf 'tail -f'
alias tmain 'tmuxsession main'
alias tsn 'tmuxsession'
alias tssh 'tmuxsession ssh'
alias u 'up'
alias v '"$VISUAL"'
alias vi '"$VISUAL"'
alias vibindkey 'reset_keybindings vi'
alias vimrc '"$EDITOR" "$DOTFILES_HOME/config/vim/vimrc"'
alias vs 'vim-server'
alias wget 'wget -c'
alias zshrc '"$EDITOR" "$DOTFILES_HOME/config/shellrc"'

set    gray = "%{\033[1;30m%}"
set     red = "%{\033[1;31m%}"
set   green = "%{\033[0;32m%}"
set  yellow = "%{\033[1;33m%}"
set    blue = "%{\033[1;34m%}"
set magenta = "%{\033[1;35m%}"
set    cyan = "%{\033[1;36m%}"
set   white = "%{\033[0;37m%}"
set   reset = "%{\033[0m%}"
set      ds = '$'

set prompt = "${red}%n@%m${reset}:${blue}%~ ${gray}(SHELL=tcsh)${reset} \n ${green}${ds}${reset} "

unset red green yellow blue magenta cyan yellow white reset ds

if ( ! $?OVERRIDE_CSH ) then
    setenv OVERRIDE_CSH false
endif

# Exec zsh or bash if using an interactive shell.
if (($?prompt) && ("${OVERRIDE_CSH}" == 'true')) then
    setenv NEW_SHELL ''
    test -z "${NEW_SHELL}" && test -n "${ZSH_BIN}"    && setenv NEW_SHELL "${ZSH_BIN}"
    test -z "${NEW_SHELL}" && test -n "${BASH_BIN}"   && setenv NEW_SHELL "${BASH_BIN}"
    test -z "${NEW_SHELL}"                            && setenv NEW_SHELL '/bin/bash'

    test -n "${NEW_SHELL}" && setenv SHELL "${NEW_SHELL}" && exec "${SHELL}"
endif
