#!/bin/bash

check_socket_running() {
    SOCK="$1"
    if supports_z_option; then
        nc -z -U "$SOCK" > /dev/null 2>&1
    else
        timeout 0.25 nc -U "$SOCK" > /dev/null 2>&1
        exit_code="$?"
        [[ "$exit_code" = '124' ]] && return 0 || return "$exit_code"
    fi
}

supports_z_option() {
    [ "$DOTFILES_CONFIG_LEGACY_SSH_AGENT" = 'true' ] && return 1
    ! ( nc -z 2>&1 | grep -i 'invalid option' ) > /dev/null 2>&1
}

start_new_agent() {
    ssh-agent | sed 's/^echo/#echo/' > "$SSH_ENV"
    chmod 600 "$SSH_ENV"
    source "$SSH_ENV" > /dev/null 2>&1
    [ "$OPT_ADD" = 'true' ] && ssh-add
}

[ "$1" = "--add" ] && OPT_ADD=true

SSH_HOME="$HOME/.ssh"
SSH_ENV="$SSH_HOME/environment"
if [[ ! -d "$SSH_HOME/" ]]; then
    mkdir "$SSH_HOME/"
    chmod 700 "$SSH_HOME/"
fi

if [[ -n "$SSH_AUTH_SOCK" ]] &&
        check_socket_running "$SSH_AUTH_SOCK" &&
        ! echo "$SSH_AUTH_SOCK" | grep /keyring/ > /dev/null; then
    # Agent socket is already running
    return
fi

if [[ -f "$SSH_ENV" ]]; then
    source "$SSH_ENV" > /dev/null 2>&1
fi

if [[ -z "$SSH_AUTH_SOCK" ]] || ! check_socket_running "$SSH_AUTH_SOCK"; then
    rm -f "$SSH_AUTH_SOCK"
    rmdir "$(dirname "$SSH_AUTH_SOCK")"
    start_new_agent
fi
