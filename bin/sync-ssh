#!/bin/bash

set -e

source ~/.dotfiles.env
source "$DOTFILES_HOME/bin/lib/log"
source "$DOTFILES_HOME/bin/lib/assert_file"

CONFIG_ROOT_PATH="$DOTFILES_HOME/custom/config/dotfiles/sync-ssh"

VALID_OPERATIONS=(
    PULL
    PULL_MIRROR
    PULL_MIRROR_OVERWRITE
    PULL_OVERWRITE
    PUSH
    PUSH_MIRROR
    PUSH_MIRROR_OVERWRITE
    PUSH_OVERWRITE
)

REQUIRED_PARAMETERS=(
    HOST
)

trap int_trap INT
int_trap() {
    info "Interrupted"
    exit 1
}

validate_required_parameters() {
    for param_name in "${REQUIRED_PARAMETERS[@]}"; do
        param_value="${!param_name}"
        info "$param_name=$param_value"
        if [[ -z "$param_value" ]]; then
            error "$param_name has no value."
            exit 1
        fi
    done
}

single_quote() {
    echo "'${1//\'/\'\\\'\'}'"
}

mkdir_backup() {
    backup_dir="$1"

    info "Creating local backup directory: $backup_dir"
    mkdir -p "$backup_dir"

    info "Creating remote backup directory: $backup_dir"
    ssh "$HOST" -- "mkdir -p $(single_quote "$backup_dir")"
    # rsync -a -s --rsh='ssh -T -o Compression=no -x' -f"+ */" -f"- *" "$BACKUP_ROOT/" "${HOST}:$BACKUP_ROOT/" > /dev/null
}

clean_empty_backup_directories() {
    if [[ -z "$BACKUP_ROOT" ]]; then
        error "Cannot clean backup. BACKUP_ROOT is not set"
        exit 1
    fi
    info "Cleaning empty directories..."
    find "$BACKUP_ROOT" -type d -empty -delete
    ssh "$HOST" -- find "$BACKUP_ROOT" -type d -empty -delete
}

generate_exclude_opts_result=()
generate_exclude_opts() {
    TRANSFER_ROOT="$1"

    generate_exclude_opts_result=()

    while true; do
        last_char="${TRANSFER_ROOT:${#TRANSFER_ROOT} - 1}"
        if [[ "$last_char" != '/' ]]; then
            break;
        fi
        TRANSFER_ROOT="${TRANSFER_ROOT:0:${#TRANSFER_ROOT} - 1}"
    done

    arr=()
    for ex_path in "${EXCLUDES[@]}"; do
        if [[ "$ex_path" == "$TRANSFER_ROOT"/* ]]; then
            new_path="${ex_path:${#TRANSFER_ROOT}}"
            arr+=(--exclude="$new_path")
            info "Excludes: $new_path"
        fi
    done

    for pattern in "${EXCLUDE_PATTERNS[@]}"; do
        arr+=(--exclude="$pattern")
        info "Excludes: $pattern"
    done

    generate_exclude_opts_result=("${arr[@]}")
}

rsync_args_result=()
rsync_args() {
    OPERATION="$1"
    local_path="$2"
    remote_path="$3"
    backup_dir="$4"

    rsync_args_result=()

    args=()
    args+=(-av --progress -h)
    args+=(-s --rsh='ssh -T -o Compression=no -x')

    if [[ ! "$OPERATION" = *_OVERWRITE* ]]; then
        args+=(-u)
    fi

    if [[ -n "$backup_dir" ]]; then
        args+=(-b --backup-dir="$backup_dir")
    fi

    if [[ "$OPERATION" = *_MIRROR* ]]; then
        args+=(--delete)
    fi

    if [[ "$OPERATION" = PULL* ]]; then
        generate_exclude_opts "$remote_path"
    elif [[ "$OPERATION" = PUSH* ]]; then
        generate_exclude_opts "$local_path"
    fi
    args+=("${generate_exclude_opts_result[@]}")

    args+=("${RSYNC_EXTRA_ARGS[@]}")

    if [[ "$OPERATION" = PULL* ]]; then
        args+=("${HOST}:$remote_path")
        args+=("$local_path")
    elif [[ "$OPERATION" = PUSH* ]]; then
        args+=("$local_path")
        args+=("${HOST}:$remote_path")
    fi

    rsync_args_result=("${args[@]}")
}

run() {
    operation="$1"
    local_path="$2"
    remote_path="${3:-$2}"

    if ! echo "$operation" | grep -P "^($(echo "${VALID_OPERATIONS[@]}" | tr ' ' '|'))$" > /dev/null 2>&1; then
        error "Operation '$operation' is not valid"
        return
    fi
    validate_required_parameters

    if [[ -n "$BACKUP_ROOT" ]]; then
        backup_dir="$BACKUP_ROOT/$(realpath "$local_path")"
        mkdir_backup "$backup_dir"
    else
        warning "No BACKUP_ROOT is set"
    fi

    info "Profile: $profile"
    info "Host: $HOST"
    if [[ "$local_path" == "$remote_path" ]]; then
        info "$operation: $local_path"
    else
        if [[ "$operation" = PULL* ]]; then
            info "$operation: $HOST:$remote_path => $local_path"
        elif [[ "$operation" = PUSH* ]]; then
            info "$operation: $local_path => $HOST:$remote_path"
        fi
    fi

    rsync_args "$operation" "$local_path" "$remote_path" "$backup_dir"
    rsync "${rsync_args_result[@]}"
}

run_profile () {
    local profile="$1"
    info "Selected profile: $profile"

    local profile_file="$CONFIG_ROOT_PATH/profiles/$profile"
    if [[ ! -f "$profile_file" ]]; then
        error "Cannot find profile $profile at $profile_file"
        return 1
    fi

    assert_file "$profile_file"
    info "Loading profile at '$profile_file'"

    export -f run
    export HOST=''
    export BACKUP_ROOT=''
    export EXCLUDES=()
    export EXCLUDE_PATTERNS=()
    source "$profile_file"
}

info "Started at $(date)"

profiles=("$@")
if [[ "${#profiles}" = '0' ]]; then
    profiles=(default)
fi

for profile in "${profiles[@]}"; do
    run_profile "$profile" || continue
done

if [[ -n "$BACKUP_ROOT" ]]; then
    clean_empty_backup_directories
fi
