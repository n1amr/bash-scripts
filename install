#!/bin/sh

set -e

. "$(dirname "$0")/bin/lib/polyfills.sh"

dir="$(realpath "$(dirname "$0")")"

DOTFILES_ENV="${DOTFILES_ENV:-default}"
DOTFILES_HOME="$dir"
DST_HOME="$HOME"

interactive='true'

while [ $# != 0 ]; do
    case "$1" in
        --user-home)      DST_HOME="$2";      shift ;;
        --dotfiles-path)  DOTFILES_HOME="$2"; shift ;;
        --env|-e)         DOTFILES_ENV="$2";  shift ;;
        --no-interactive|-f) interactive='false' ;;
        --interactive|-i)    interactive='true' ;;
        *)
            echo 'Invalid Syntax'
            exit 1
        ;;
    esac
    shift
done

if [ "$interactive" = 'true' ]; then
    # Set DOTFILES_ENV
    printf "Enter your environment name [%s]: " "$DOTFILES_ENV"
    read -r response
    if [ ! -z "$response" ]; then
        DOTFILES_ENV="$response"
    fi

    # Set DST_HOME
    printf "Enter your home directory [%s]: " "$DST_HOME"
    read -r response
    if [ ! -z "$response" ]; then
        DST_HOME="$(realpath "$response")"
    fi

    # Set DOTFILES_HOME
    printf "Enter dotfiles directory [%s]: " "$DOTFILES_HOME"
    read -r response
    if [ ! -z "$response" ]; then
        DOTFILES_HOME="$(realpath "$response")"
    fi
fi

if [ "$interactive" = 'true' ]; then
    safe_link () { "$dir/bin/ln-safe" "$@"; }
else
    safe_link () { "$dir/bin/ln-safe" -f "$@"; }
fi

DOTFILES_DIR="$DST_HOME/.dotfiles"
if [ ! "$DOTFILES_DIR" -ef "$DOTFILES_HOME" ]; then
    if [ -e "$DOTFILES_DIR" ]; then
        mv "$DOTFILES_DIR" "${DOTFILES_DIR}.bak.$(date --utc +"%Y%m%d%H%M%S")"
    fi
    ln -sf "$DOTFILES_HOME" "$DOTFILES_DIR"
    # DOTFILES_HOME="$DOTFILES_DIR"
fi

DOTFILES_CUSTOM_DIR="$DOTFILES_HOME/custom"
mkdir -pv "$DOTFILES_CUSTOM_DIR"
mkdir -pv "$DOTFILES_CUSTOM_DIR/bin"
mkdir -pv "$DOTFILES_CUSTOM_DIR/config/dotfiles"
mkdir -pv "$DOTFILES_CUSTOM_DIR/history"
touch "$DOTFILES_CUSTOM_DIR/history/shell_history"
touch "$DOTFILES_CUSTOM_DIR/history/shell_history.bak"

config_files="
    driverc
    emacs
    emacs.d
    fonts
    gitconfig
    gitignore
    inputrc
    irbrc
    profile
    sqliterc
    tcshrc
    tmux.conf
    vim
    wgetrc
    xinitrc
    xsessionrc
"

for cf in $config_files; do
    safe_link "$DST_HOME/.$cf" "$DOTFILES_HOME/config/$cf"
done

for cf in bashrc zshrc; do
    safe_link "$DST_HOME/.$cf" "$DOTFILES_HOME/config/shellrc"
done

# Custom config directories
mkdir -pv "$DOTFILES_HOME/custom/config/mutt/"
mkdir -pv "$DOTFILES_HOME/custom/config/ranger/"
mkdir -pv "$DOTFILES_HOME/custom/history/"

safe_link "$DST_HOME/.config/cmus/" "$DOTFILES_HOME/config/cmus/"
safe_link "$DST_HOME/.config/ranger/" "$DOTFILES_HOME/custom/config/ranger/"
safe_link "$DST_HOME/.mutt/" "$DOTFILES_HOME/config/mutt/"

custom_install="$DOTFILES_CUSTOM_DIR/custom_install"
if [ -x "$custom_install" ]; then
    export interactive
    export DOTFILES_ENV
    export DOTFILES_HOME
    export DST_HOME
    "$custom_install"
fi

safe_link "$DST_HOME/.config/i3/" "$DOTFILES_HOME/config/i3/"
safe_link "$DST_HOME/.config/nvim/init.vim" "$DOTFILES_HOME/config/nvim.vim"
safe_link "$DST_HOME/.config/ranger/commands.py" "$DOTFILES_HOME/config/ranger/commands.py"
safe_link "$DST_HOME/.config/ranger/rc.conf" "$DOTFILES_HOME/config/ranger/rc.conf"
safe_link "$DST_HOME/.config/ranger/rifle.conf" "$DOTFILES_HOME/config/ranger/rifle.conf"
safe_link "$DST_HOME/.config/ranger/scope.sh" "$DOTFILES_HOME/config/ranger/scope.sh"
safe_link "$DST_HOME/.config/vlc/" "$DOTFILES_HOME/config/vlc/"
safe_link "$DST_HOME/.ipython/profile_default/" "$DOTFILES_HOME/config/ipython/profile_default/"
safe_link "$DST_HOME/.irssi/" "$DOTFILES_HOME/config/irssi/"
safe_link "$DST_HOME/.shell_history" "$DOTFILES_CUSTOM_DIR/history/shell_history"
safe_link "$DST_HOME/.shell_history.bak" "$DOTFILES_CUSTOM_DIR/history/shell_history.bak"
safe_link "$DST_HOME/.vimrc" "$DOTFILES_HOME/config/vim/vimrc"

DOTFILES_ENV="${DOTFILES_ENV:-default}"
DOTFILES_ENV_HOME="$DST_HOME"
DOTFILES_ENV_USER="${DOTFILES_ENV_USER:-$USER}"

generate_global_dotfiles_config () {
    local config_file="$1"
    touch "$config_file"
    chmod +x "$config_file"

    echo "Note: Creating new config file at $config_file:"
    echo "# ===== Start ====="
    (
        echo '#!/bin/bash'
        echo
        echo "export DOTFILES_ENV='$DOTFILES_ENV'"
        echo "export DOTFILES_ENV_HOME='$DOTFILES_ENV_HOME'"
        echo "export DOTFILES_ENV_USER='$DOTFILES_ENV_USER'"
        echo
        echo "export DOTFILES_HOME=\"\$DOTFILES_ENV_HOME/.dotfiles\""
        echo "export NDENV_ROOT=\"\$DOTFILES_ENV_HOME/.ndenv\""
        echo "export PYENV_ROOT=\"\$DOTFILES_ENV_HOME/.pyenv\""
        echo "export RBENV_ROOT=\"\$DOTFILES_ENV_HOME/.rbenv\""
        echo "export BUILD_PREFIX=\"\$DOTFILES_ENV_HOME/.local\""
    ) | tee -a "$config_file"
    echo "# ===== End ====="
}

DOTFILES_CONFIG_FILE="$DOTFILES_CUSTOM_DIR/dotfiles_config"
if [ ! -f "$DOTFILES_CONFIG_FILE" ]; then
    generate_global_dotfiles_config "$DOTFILES_CONFIG_FILE"
fi

if [ "$DOTFILES_ENV" = 'default' ]; then
    DOTFILES_LOCAL_CONFIG_FILE="$DOTFILES_CUSTOM_DIR/dotfiles_config"
else
    DOTFILES_LOCAL_CONFIG_FILE="$DOTFILES_CUSTOM_DIR/dotfiles_config.${DOTFILES_ENV}"
    if [ ! -f "$DOTFILES_LOCAL_CONFIG_FILE" ]; then
        {
            echo "#!/bin/sh"
            echo
            echo "export DOTFILES_ENV='$DOTFILES_ENV'"
            echo ". '$(realpath "$DOTFILES_CONFIG_FILE")'"
            echo "export DOTFILES_ENV='$DOTFILES_ENV'"
            echo
            echo "# Add environent dependent config in this file"
        } > "$DOTFILES_LOCAL_CONFIG_FILE"
    fi
fi
safe_link "$DST_HOME/.dotfiles_config" "$DOTFILES_LOCAL_CONFIG_FILE"

# fzf install
"$DOTFILES_HOME/thirdparty/fzf/install" --bin

echo "Successful!"
if [ "$interactive" = 'true' ]; then
    exec "$SHELL"
fi
